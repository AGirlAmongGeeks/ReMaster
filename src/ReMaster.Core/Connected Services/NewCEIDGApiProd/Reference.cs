//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewCEIDGApiProd
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewCEIDGApiProd.INewDataStoreProvider")]
    public interface INewDataStoreProvider
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewDataStoreProvider/GetID", ReplyAction="http://tempuri.org/INewDataStoreProvider/GetIDResponse")]
        System.Threading.Tasks.Task<string> GetIDAsync(string AuthToken, System.Nullable<System.DateTime> DateFrom, System.Nullable<System.DateTime> DateTo, System.Nullable<System.DateTime> MigrationDateFrom, System.Nullable<System.DateTime> MigrationDateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewDataStoreProvider/GetMigrationDataExtendedAddressInfo", ReplyAction="http://tempuri.org/INewDataStoreProvider/GetMigrationDataExtendedAddressInfoRespo" +
            "nse")]
        System.Threading.Tasks.Task<string> GetMigrationDataExtendedAddressInfoAsync(
                    string authToken, 
                    System.Collections.Generic.List<string> NIP, 
                    System.Collections.Generic.List<string> REGON, 
                    System.Collections.Generic.List<string> NIP_SC, 
                    System.Collections.Generic.List<string> REGON_SC, 
                    System.Collections.Generic.List<string> Name, 
                    System.Collections.Generic.List<string> Province, 
                    System.Collections.Generic.List<string> County, 
                    System.Collections.Generic.List<string> Commune, 
                    System.Collections.Generic.List<string> City, 
                    System.Collections.Generic.List<string> Street, 
                    System.Collections.Generic.List<string> Postcode, 
                    System.Nullable<System.DateTime> DateFrom, 
                    System.Nullable<System.DateTime> DateTo, 
                    System.Collections.Generic.List<string> PKD, 
                    System.Collections.Generic.List<int> status, 
                    System.Collections.Generic.List<string> UniqueId, 
                    System.Nullable<System.DateTime> MigrationDateFrom, 
                    System.Nullable<System.DateTime> MigrationDateTo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public interface INewDataStoreProviderChannel : NewCEIDGApiProd.INewDataStoreProvider, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public partial class NewDataStoreProviderClient : System.ServiceModel.ClientBase<NewCEIDGApiProd.INewDataStoreProvider>, NewCEIDGApiProd.INewDataStoreProvider
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NewDataStoreProviderClient() : 
                base(NewDataStoreProviderClient.GetDefaultBinding(), NewDataStoreProviderClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_INewDataStoreProvider.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewDataStoreProviderClient(EndpointConfiguration endpointConfiguration) : 
                base(NewDataStoreProviderClient.GetBindingForEndpoint(endpointConfiguration), NewDataStoreProviderClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewDataStoreProviderClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NewDataStoreProviderClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewDataStoreProviderClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NewDataStoreProviderClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewDataStoreProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetIDAsync(string AuthToken, System.Nullable<System.DateTime> DateFrom, System.Nullable<System.DateTime> DateTo, System.Nullable<System.DateTime> MigrationDateFrom, System.Nullable<System.DateTime> MigrationDateTo)
        {
            return base.Channel.GetIDAsync(AuthToken, DateFrom, DateTo, MigrationDateFrom, MigrationDateTo);
        }
        
        public System.Threading.Tasks.Task<string> GetMigrationDataExtendedAddressInfoAsync(
                    string authToken, 
                    System.Collections.Generic.List<string> NIP, 
                    System.Collections.Generic.List<string> REGON, 
                    System.Collections.Generic.List<string> NIP_SC, 
                    System.Collections.Generic.List<string> REGON_SC, 
                    System.Collections.Generic.List<string> Name, 
                    System.Collections.Generic.List<string> Province, 
                    System.Collections.Generic.List<string> County, 
                    System.Collections.Generic.List<string> Commune, 
                    System.Collections.Generic.List<string> City, 
                    System.Collections.Generic.List<string> Street, 
                    System.Collections.Generic.List<string> Postcode, 
                    System.Nullable<System.DateTime> DateFrom, 
                    System.Nullable<System.DateTime> DateTo, 
                    System.Collections.Generic.List<string> PKD, 
                    System.Collections.Generic.List<int> status, 
                    System.Collections.Generic.List<string> UniqueId, 
                    System.Nullable<System.DateTime> MigrationDateFrom, 
                    System.Nullable<System.DateTime> MigrationDateTo)
        {
            return base.Channel.GetMigrationDataExtendedAddressInfoAsync(authToken, NIP, REGON, NIP_SC, REGON_SC, Name, Province, County, Commune, City, Street, Postcode, DateFrom, DateTo, PKD, status, UniqueId, MigrationDateFrom, MigrationDateTo);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INewDataStoreProvider))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INewDataStoreProvider))
            {
                return new System.ServiceModel.EndpointAddress("http://datastore.ceidg.gov.pl/CEIDG.DataStore/services/NewDataStoreProvider.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return NewDataStoreProviderClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_INewDataStoreProvider);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return NewDataStoreProviderClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_INewDataStoreProvider);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_INewDataStoreProvider,
        }
    }
}
